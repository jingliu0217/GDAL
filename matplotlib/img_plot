def create_png(data,pngname,threshold,trans):
    # 解决中文显示问题
    plt.rcParams['font.sans-serif'] = ['SimHei']
    plt.rcParams['axes.unicode_minus'] = False
    
    fig = plt.figure(1 , figsize=(5,4))
    axs0 = plt.subplot(111)
    colors = ['#FFFFFF',\
              "#96F3FF"  ,"#83E8FF"  ,"#1AD4FF","#00C3FF" ,\
              "#00E6AF", "#00E650", "#00E619", "#1EE600",\
              "#DCFA00", "#FFF400", "#FFEF00", "#FFE600",\
              "#FFBC00", "#FFB200","#FFAA00", "#FE9100",\
              "#FE7300", "#FA0000", "#F90000", "#F80103"]

    # 边界值,包下不包上,并且设置阈值,根据阈值划分边界
    list_bounds = np.linspace(0.0001,float(threshold),22)
    list_bounds = np.insert(list_bounds, 0, 0)
    bounds = np.append(list_bounds, float(threshold)*1.2)
    cmap = mpl.colors.ListedColormap(colors)
    norm = mpl.colors.BoundaryNorm(bounds, cmap.N)
    im = axs0.imshow(data, interpolation='bicubic', cmap=cmap, norm=norm,origin='upper')
    plt.axis('off')
    
    name = os.path.basename(pngname)
    name = name.split('_')[0]
    axs0.set_title(name+'_'+trans, y=1.05, fontdict={'fontsize': 7, 'fontweight': 'medium'})

    #添加颜色条
    sm = cm.ScalarMappable(cmap=cmap, norm=norm)  # norm设置最大最小值
    sm.set_array(bounds)
    cb = plt.colorbar(sm,pad=0.05,shrink=0.8)

    cb.outline.set_linewidth(0.05)
    tick_locator = ticker.MaxNLocator(nbins=5)
    cb.locator = tick_locator
    #cb.set_ticks('off')

    #设置刻度线数值
    cb.set_ticks([np.min(bounds), np.min(bounds)+np.max(bounds)/4-np.max(bounds)/4/3,\
        np.min(bounds)+np.max(bounds)/4*2-np.max(bounds)/4/3, \
        np.min(bounds)+np.max(bounds)/4*3-np.max(bounds)/4/3, np.max(bounds)],)
    cb.ax.tick_params(width=0,length=0.5)
    cb.update_ticks()
    cb.ax.tick_params(labelsize=4)

    # 去除图像周围的白边
    fig.set_size_inches(3,1.5)
    plt.gca().xaxis.set_major_locator(plt.NullLocator())
    plt.gca().yaxis.set_major_locator(plt.NullLocator())
    plt.subplots_adjust(top=0.8, bottom=0, left=0.03, right=1, hspace=0, wspace=0)
    plt.margins(0, 0)
    plt.savefig(pngname, dpi=500)
    plt.close()

    return pngname + '_finish_write'
